package org.europa.together.business;

import java.util.List;
import org.europa.together.domain.TreeNode;

/**
 * Implementation of the TREE Datastructure. The Domain Object TreeNode
 * represent a node: <br>
 * <li>UUID (String): autogenerated by Constructor
 * <li>name (String): a human readeble description of the node (e. g. Folder)
 * <li>value (Object): represent the content of a node (e. g. File)
 * <li>parent (String): Reference of the UUID to the parent node
 *
 * @author elmar.dott@gmail.com
 */
public interface TreeWalker {

    /**
     * Add the root node to the tree.
     *
     * @param root as TreeNode
     * @return ture on success
     */
    boolean addRoot(TreeNode root);

    /**
     * Test if a node is a element of the tree.
     *
     * @param node as TreeNode
     * @return true on success
     */
    boolean isElementOfTree(TreeNode node);

    /**
     * Check if a given node is a leaf in the tree. Leafs don't have child
     * nodes. => node.uuid != otherNode.getParent
     *
     * @param node as TreeNode
     * @return true on success
     */
    boolean isLeaf(TreeNode node);

    /**
     * Removes a Node (Leaf) from the tree. This method allows just to cut
     * elements from the tree who have no children. In the case it is necessary
     * to cut a subtree use the prune() method.
     *
     * @param node as TreeNode
     * @return true on success
     */
    boolean removeNode(TreeNode node);

    /**
     * Count all the levels of the Tree.
     *
     * @return levels as int
     */
    int countLevelsOfTree();

    /**
     * Count the nodes of the tree.
     *
     * @return count as int
     */
    int countNodes();

    /**
     * Test if a Element name exist more than one time. Useful to get to know
     * how often a name is used. Return the count how often the name for this
     * element already appear in the data structure.
     *
     * @param nodeName as String
     * @return count as int
     */
    int isNameUnique(String nodeName);

    /**
     * Get all nodes of the tree with the same NodeName.
     *
     * @param nodeName as String
     * @return nodes as List
     */
    List<TreeNode> getElemtByName(String nodeName);

    /**
     * Get the full tree.
     *
     * @return tree as List
     */
    List<TreeNode> getTree();

    /**
     * Get a TreeNode by his UUID.
     *
     * @param uuid as String
     * @return node as TreeNode
     */
    TreeNode getNodeByUuid(String uuid);

    /**
     * Get the root TreeNode.
     *
     * @return root as TreeNode
     */
    TreeNode getRoot();

    /**
     * Add the node to the tree. Check if the node is already exist in the tree
     * by comparing the UUID. In the case there exist a node already with the
     * UUID then the new one will not added. Another check is that not exist two
     * nodes with the same name and the same parent. Also for this case the node
     * will not be added to the tree.
     *
     * @param node as TreeNode
     */
    void addNode(TreeNode node);
}
